<?xml version="1.0" encoding="UTF-8" ?>
<testsuites>
  <testsuite errors="0" failures="0" hostname="grails" id="0" name="AuthControllerSpec" package="" tests="21" time="2.51" timestamp="2011-08-31T06:41:06">
      <properties />

      <testcase classname="AuthControllerSpec" name="that login view will be rendered when automate login is disabled" time="0.954" />

      <testcase classname="AuthControllerSpec" name="that SP redirect will be invoked when autologin active" time="0.096" />

      <testcase classname="AuthControllerSpec" name="that logout will redirect to application root" time="0.134" />

      <testcase classname="AuthControllerSpec" name="Echo returns set attributes" time="0.076" />

      <testcase classname="AuthControllerSpec" name="Echo returns set headers" time="0.074" />

      <testcase classname="AuthControllerSpec" name="403 when sp is disabled for federated login" time="0.062" />

      <testcase classname="AuthControllerSpec" name="incomplete and redirect to federatedincomplete when principal not provided" time="0.112" />

      <testcase classname="AuthControllerSpec" name="incomplete and redirect to federatedincomplete when credential not provided" time="0.13" />

      <testcase classname="AuthControllerSpec" name="redirect to root URI when all is valid and no target supplied" time="0.138" />

      <testcase classname="AuthControllerSpec" name="redirect to target URI when all is valid and target supplied" time="0.075" />

      <testcase classname="AuthControllerSpec" name="redirect to federatederror when IncorrectCredentialsException thrown" time="0.073" />

      <testcase classname="AuthControllerSpec" name="redirect to federatederror when DisabledAccountException thrown" time="0.066" />

      <testcase classname="AuthControllerSpec" name="redirect to federatederror when AuthenticationException thrown" time="0.043" />

      <testcase classname="AuthControllerSpec" name="403 when local is disabled for local login" time="0.028" />

      <testcase classname="AuthControllerSpec" name="incomplete and redirect to federatedincomplete when principal not provided to locallogin" time="0.072" />

      <testcase classname="AuthControllerSpec" name="incomplete and redirect to federatedincomplete when credential not provided to locallogin" time="0.069" />

      <testcase classname="AuthControllerSpec" name="redirect to root URI when all is valid and no target supplied to locallogin" time="0.038" />

      <testcase classname="AuthControllerSpec" name="redirect to target URI when all is valid and target supplied to locallogin" time="0.076" />

      <testcase classname="AuthControllerSpec" name="redirect to federatederror when IncorrectCredentialsException thrown in locallogin" time="0.046" />

      <testcase classname="AuthControllerSpec" name="redirect to federatederror when DisabledAccountException thrown in locallogin" time="0.051" />

      <testcase classname="AuthControllerSpec" name="redirect to federatederror when AuthenticationException thrown in locallogin" time="0.052" />

      <system-out><![CDATA[--Output from that login view will be rendered when automate login is disabled--
--Output from that SP redirect will be invoked when autologin active--
--Output from that logout will redirect to application root--
INFO (AuthController): Signing out subject [1]http://test.com!http://sp.test.com!1234
--Output from Echo returns set attributes--
--Output from Echo returns set headers--
--Output from 403 when sp is disabled for federated login--
ERROR (AuthController): Attempt to do federated login when Apache SP is not marked active in local configuration
--Output from incomplete and redirect to federatedincomplete when principal not provided--
WARN (AuthController): Incomplete federated authentication attempt was aborted
WARN (AuthController): Unique subject identifier (principal) was not presented
WARN (AuthController): Internal SAML session identifier (credential) was not presented
--Output from incomplete and redirect to federatedincomplete when credential not provided--
WARN (AuthController): Incomplete federated authentication attempt was aborted
WARN (AuthController): Internal SAML session identifier (credential) was not presented
--Output from redirect to root URI when all is valid and no target supplied--
INFO (AuthController): Successfully processed federation based authentication event for subject http://test.com!http://sp.test.com!1234 based on credential provided in 1234-mockid-5678, redirecting to content
--Output from redirect to target URI when all is valid and target supplied--
INFO (AuthController): Successfully processed federation based authentication event for subject http://test.com!http://sp.test.com!1234 based on credential provided in 1234-mockid-5678, redirecting to content
--Output from redirect to federatederror when IncorrectCredentialsException thrown--
WARN (AuthController): Federated credentials failure for subject http://test.com!http://sp.test.com!1234, incorrect credentials.
--Output from redirect to federatederror when DisabledAccountException thrown--
WARN (AuthController): Federated credentials failure for subject http://test.com!http://sp.test.com!1234, account disabled locally
--Output from redirect to federatederror when AuthenticationException thrown--
WARN (AuthController): Federated credentials failure for subject http://test.com!http://sp.test.com!1234, generic fault
--Output from 403 when local is disabled for local login--
ERROR (AuthController): Authentication diverted to local development/testing accounts but this mode is not enabled in configuration
--Output from incomplete and redirect to federatedincomplete when principal not provided to locallogin--
INFO (AuthController): Incomplete federated authentication attempt was aborted
WARN (AuthController): Unique subject identifier (principal) was not presented
WARN (AuthController): Internal SAML session identifier (credential) was not presented
--Output from incomplete and redirect to federatedincomplete when credential not provided to locallogin--
INFO (AuthController): Incomplete federated authentication attempt was aborted
WARN (AuthController): Internal SAML session identifier (credential) was not presented
--Output from redirect to root URI when all is valid and no target supplied to locallogin--
INFO (AuthController): Successfully processed local development/testing authentication event for subject http://test.com!http://sp.test.com!1234 based on credential provided in 1234-mockid-5678, redirecting to content
--Output from redirect to target URI when all is valid and target supplied to locallogin--
INFO (AuthController): Successfully processed local development/testing authentication event for subject http://test.com!http://sp.test.com!1234 based on credential provided in 1234-mockid-5678, redirecting to content
--Output from redirect to federatederror when IncorrectCredentialsException thrown in locallogin--
WARN (AuthController): Local credentials failure for subject http://test.com!http://sp.test.com!1234, incorrect credentials.
--Output from redirect to federatederror when DisabledAccountException thrown in locallogin--
WARN (AuthController): Local credentials failure for subject http://test.com!http://sp.test.com!1234, account disabled locally
--Output from redirect to federatederror when AuthenticationException thrown in locallogin--
WARN (AuthController): Local credentials failure for subject http://test.com!http://sp.test.com!1234, generic fault
]]></system-out>

      <system-err><![CDATA[--Output from that login view will be rendered when automate login is disabled--
--Output from that SP redirect will be invoked when autologin active--
--Output from that logout will redirect to application root--
--Output from Echo returns set attributes--
--Output from Echo returns set headers--
--Output from 403 when sp is disabled for federated login--
--Output from incomplete and redirect to federatedincomplete when principal not provided--
--Output from incomplete and redirect to federatedincomplete when credential not provided--
--Output from redirect to root URI when all is valid and no target supplied--
--Output from redirect to target URI when all is valid and target supplied--
--Output from redirect to federatederror when IncorrectCredentialsException thrown--
--Output from redirect to federatederror when DisabledAccountException thrown--
--Output from redirect to federatederror when AuthenticationException thrown--
--Output from 403 when local is disabled for local login--
--Output from incomplete and redirect to federatedincomplete when principal not provided to locallogin--
--Output from incomplete and redirect to federatedincomplete when credential not provided to locallogin--
--Output from redirect to root URI when all is valid and no target supplied to locallogin--
--Output from redirect to target URI when all is valid and target supplied to locallogin--
--Output from redirect to federatederror when IncorrectCredentialsException thrown in locallogin--
--Output from redirect to federatederror when DisabledAccountException thrown in locallogin--
--Output from redirect to federatederror when AuthenticationException thrown in locallogin--
]]></system-err>

  </testsuite>
  <testsuite errors="0" failures="0" hostname="grails" id="1" name="FederatedRealmSpec" package="" tests="8" time="0.607" timestamp="2011-08-31T06:41:10">
      <properties />

      <testcase classname="FederatedRealmSpec" name="UnknownAccountException when federated authentication is not enabled" time="0.03" />

      <testcase classname="FederatedRealmSpec" name="UnknownAccountException when principal is not supplied" time="0.02" />

      <testcase classname="FederatedRealmSpec" name="UnknownAccountException when credential is not supplied" time="0.018" />

      <testcase classname="FederatedRealmSpec" name="DisabledAccountException when user doesnt already exist and autoprovision disabled" time="0.077" />

      <testcase classname="FederatedRealmSpec" name="Basic account created when autoprovision is enabled" time="0.111" />

      <testcase classname="FederatedRealmSpec" name="Existing, disabled account throws DisabledAccountException" time="0.087" />

      <testcase classname="FederatedRealmSpec" name="Failing subject save for new account throws RuntimeException" time="0.101" />

      <testcase classname="FederatedRealmSpec" name="Failing subject save for session record throws RuntimeException" time="0.157" />

      <system-out><![CDATA[--Output from UnknownAccountException when federated authentication is not enabled--
ERROR (FederatedRealm): Authentication attempt for federated provider, denying attempt as federation integration disabled
--Output from UnknownAccountException when principal is not supplied--
ERROR (FederatedRealm): Authentication attempt for federated provider, denying attempt as no persistent identifier was provided
--Output from UnknownAccountException when credential is not supplied--
ERROR (FederatedRealm): Authentication attempt for federated provider, denying attempt as no credential was provided
--Output from DisabledAccountException when user doesnt already exist and autoprovision disabled--
ERROR (FederatedRealm): Authentication attempt for federated provider, denying attempt as federation integration is denying automated account provisioning
--Output from Basic account created when autoprovision is enabled--
INFO (FederatedRealm): No subject represented by http://test.com!http://sp.test.com!1234 exists in local repository, provisioning new account
INFO (FederatedRealm): Successfully logged in subject [2]http://test.com!http://sp.test.com!1234 using federated source
--Output from Existing, disabled account throws DisabledAccountException--
WARN (FederatedRealm): Attempt to authenticate using using federated principal mapped to a locally disabled account [3]http://test.com!http://sp.test.com!1234
--Output from Failing subject save for new account throws RuntimeException--
INFO (FederatedRealm): No subject represented by http://test.com!http://sp.test.com!1234 exists in local repository, provisioning new account
ERROR (FederatedRealm): org.codehaus.groovy.grails.plugins.testing.GrailsMockErrors: 0 errors
--Output from Failing subject save for session record throws RuntimeException--
ERROR (FederatedRealm): org.codehaus.groovy.grails.plugins.testing.GrailsMockErrors: 0 errors
]]></system-out>

      <system-err><![CDATA[--Output from UnknownAccountException when federated authentication is not enabled--
--Output from UnknownAccountException when principal is not supplied--
--Output from UnknownAccountException when credential is not supplied--
--Output from DisabledAccountException when user doesnt already exist and autoprovision disabled--
--Output from Basic account created when autoprovision is enabled--
--Output from Existing, disabled account throws DisabledAccountException--
--Output from Failing subject save for new account throws RuntimeException--
--Output from Failing subject save for session record throws RuntimeException--
]]></system-err>

  </testsuite>
  <testsuite errors="0" failures="0" hostname="grails" id="2" name="InstanceGeneratorSpec" package="grails.plugins.federatedgrails" tests="3" time="0.122" timestamp="2011-08-31T06:41:10">
      <properties />

      <testcase classname="grails.plugins.federatedgrails.InstanceGeneratorSpec" name="InstanceGenerator returns SubjectBase when no configuration supplied" time="0.021" />

      <testcase classname="grails.plugins.federatedgrails.InstanceGeneratorSpec" name="InstanceGenerator returns TestSubject when configured as such" time="0.05" />

      <testcase classname="grails.plugins.federatedgrails.InstanceGeneratorSpec" name="InstanceGenerator throws RuntimeException when invalid class set" time="0.047" />

      <system-out><![CDATA[--Output from InstanceGenerator returns SubjectBase when no configuration supplied--
--Output from InstanceGenerator returns TestSubject when configured as such--
--Output from InstanceGenerator throws RuntimeException when invalid class set--
]]></system-out>

      <system-err><![CDATA[--Output from InstanceGenerator returns SubjectBase when no configuration supplied--
--Output from InstanceGenerator returns TestSubject when configured as such--
--Output from InstanceGenerator throws RuntimeException when invalid class set--
]]></system-err>

  </testsuite>
  <testsuite errors="0" failures="0" hostname="grails" id="3" name="RoleSpec" package="grails.plugins.federatedgrails" tests="4" time="0.098" timestamp="2011-08-31T06:41:10">
      <properties />

      <testcase classname="grails.plugins.federatedgrails.RoleSpec" name="Ensure Role wont validate with null name" time="0.026" />

      <testcase classname="grails.plugins.federatedgrails.RoleSpec" name="Ensure Role wont validate with blank name" time="0.027" />

      <testcase classname="grails.plugins.federatedgrails.RoleSpec" name="Ensure Role wont validate with non-unique name" time="0.02" />

      <testcase classname="grails.plugins.federatedgrails.RoleSpec" name="Ensure Role will validate" time="0.02" />

      <system-out><![CDATA[--Output from Ensure Role wont validate with null name--
--Output from Ensure Role wont validate with blank name--
--Output from Ensure Role wont validate with non-unique name--
--Output from Ensure Role will validate--
]]></system-out>

      <system-err><![CDATA[--Output from Ensure Role wont validate with null name--
--Output from Ensure Role wont validate with blank name--
--Output from Ensure Role wont validate with non-unique name--
--Output from Ensure Role will validate--
]]></system-err>

  </testsuite>
  <testsuite errors="0" failures="0" hostname="grails" id="4" name="SessionRecordSpec" package="grails.plugins.federatedgrails" tests="6" time="0.1" timestamp="2011-08-31T06:41:10">
      <properties />

      <testcase classname="grails.plugins.federatedgrails.SessionRecordSpec" name="Ensure SessionRecord wont validate with null credential" time="0.038" />

      <testcase classname="grails.plugins.federatedgrails.SessionRecordSpec" name="Ensure SessionRecord wont validate with blank credential" time="0.01" />

      <testcase classname="grails.plugins.federatedgrails.SessionRecordSpec" name="Ensure SessionRecord wont validate null remoteHost credential" time="0.017" />

      <testcase classname="grails.plugins.federatedgrails.SessionRecordSpec" name="Ensure SessionRecord wont validate with blank remoteHost" time="0.015" />

      <testcase classname="grails.plugins.federatedgrails.SessionRecordSpec" name="Ensure SessionRecord wont validate null userAgent credential" time="0.007" />

      <testcase classname="grails.plugins.federatedgrails.SessionRecordSpec" name="Ensure SessionRecord wont validate with blank userAgent" time="0.008" />

      <system-out><![CDATA[--Output from Ensure SessionRecord wont validate with null credential--
--Output from Ensure SessionRecord wont validate with blank credential--
--Output from Ensure SessionRecord wont validate null remoteHost credential--
--Output from Ensure SessionRecord wont validate with blank remoteHost--
--Output from Ensure SessionRecord wont validate null userAgent credential--
--Output from Ensure SessionRecord wont validate with blank userAgent--
]]></system-out>

      <system-err><![CDATA[--Output from Ensure SessionRecord wont validate with null credential--
--Output from Ensure SessionRecord wont validate with blank credential--
--Output from Ensure SessionRecord wont validate null remoteHost credential--
--Output from Ensure SessionRecord wont validate with blank remoteHost--
--Output from Ensure SessionRecord wont validate null userAgent credential--
--Output from Ensure SessionRecord wont validate with blank userAgent--
]]></system-err>

  </testsuite>
  <testsuite errors="0" failures="0" hostname="grails" id="5" name="SubjectBaseSpec" package="grails.plugins.federatedgrails" tests="4" time="0.956" timestamp="2011-08-31T06:41:09">
      <properties />

      <testcase classname="grails.plugins.federatedgrails.SubjectBaseSpec" name="Ensure subject wont validate with null principal" time="0.8" />

      <testcase classname="grails.plugins.federatedgrails.SubjectBaseSpec" name="Ensure subject wont validate with blank principal" time="0.065" />

      <testcase classname="grails.plugins.federatedgrails.SubjectBaseSpec" name="Ensure subject wont validate with non-unique principal" time="0.047" />

      <testcase classname="grails.plugins.federatedgrails.SubjectBaseSpec" name="Ensure subject will validate" time="0.023" />

      <system-out><![CDATA[--Output from Ensure subject wont validate with null principal--
--Output from Ensure subject wont validate with blank principal--
--Output from Ensure subject wont validate with non-unique principal--
--Output from Ensure subject will validate--
]]></system-out>

      <system-err><![CDATA[--Output from Ensure subject wont validate with null principal--
--Output from Ensure subject wont validate with blank principal--
--Output from Ensure subject wont validate with non-unique principal--
--Output from Ensure subject will validate--
]]></system-err>

  </testsuite>
</testsuites>
